---
---

<footer class="site-footer">
  <div class="footer-content">
    <div class="footer-section">
      <p>&copy; 2025 Christopher de Beer. All rights reserved.</p>
    </div>
    
    <div class="footer-section">
      <button id="edit-link" class="edit-link">Edit</button>
    </div>
  </div>
</footer>

<!-- Token Setup Modal -->
<div id="token-modal" class="token-modal">
  <div class="token-modal-container">
    <div class="token-modal-header">
      <h3>GitHub Edit Setup</h3>
      <button id="close-token-modal" class="close-btn">&times;</button>
    </div>
    <div class="token-modal-content">
      <p>To enable inline editing, provide your GitHub personal access token:</p>
      <div class="token-form">
        <input 
          type="password" 
          id="github-token-input" 
          placeholder="Enter GitHub token..."
          class="token-input"
        />
        <div class="token-actions">
          <button id="save-token-btn" class="btn btn-primary">Save</button>
          <button id="test-token-btn" class="btn btn-secondary">Test</button>
          <button id="clear-token-btn" class="btn btn-danger">Clear</button>
        </div>
      </div>
      <div id="token-status" class="token-status"></div>
      <div class="token-help">
        <p><small>
          Required permissions: <code>repo</code> scope for private repositories or <code>public_repo</code> for public repositories.
          <br>
          <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Create token</a>
        </small></p>
      </div>
    </div>
  </div>
</div>

<script>
import { authService } from '../services/auth';

function initFooter() {
  const editLink = document.getElementById('edit-link');
  const tokenModal = document.getElementById('token-modal');
  const closeModalBtn = document.getElementById('close-token-modal');
  const tokenInput = document.getElementById('github-token-input') as HTMLInputElement;
  const saveBtn = document.getElementById('save-token-btn');
  const testBtn = document.getElementById('test-token-btn');
  const clearBtn = document.getElementById('clear-token-btn');
  const statusEl = document.getElementById('token-status');

  if (!editLink || !tokenModal || !closeModalBtn || !tokenInput || !saveBtn || !testBtn || !clearBtn || !statusEl) return;

  // Handle Edit link click
  editLink?.addEventListener('click', () => {
    // Check if user has token
    if (authService.hasToken()) {
      // User has token, enable edit mode by adding ?edit=true to current URL
      const url = new URL(window.location.href);
      url.searchParams.set('edit', 'true');
      window.location.href = url.toString();
    } else {
      // No token, show token setup modal
      if (tokenModal) tokenModal.style.display = 'flex';
    }
  });

  // Handle modal close
  closeModalBtn?.addEventListener('click', () => {
    if (tokenModal) tokenModal.style.display = 'none';
  });

  // Close modal when clicking outside
  tokenModal?.addEventListener('click', (e) => {
    if (e.target === tokenModal && tokenModal) {
      tokenModal.style.display = 'none';
    }
  });

  // Initialize token form
  initTokenForm();

  function initTokenForm() {
    // Load existing token (masked)
    if (authService.hasToken()) {
      tokenInput.placeholder = '••••••••••••••••';
      if (statusEl) {
        statusEl.textContent = 'Token saved';
        statusEl.className = 'token-status success';
      }
    }

    saveBtn?.addEventListener('click', async () => {
      const token = tokenInput.value.trim();
      if (!token) {
        if (statusEl) {
          statusEl.textContent = 'Please enter a token';
          statusEl.className = 'token-status error';
        }
        return;
      }

      authService.setToken(token);
      
      // Test the token
      if (statusEl) {
        statusEl.textContent = 'Testing token...';
        statusEl.className = 'token-status';
      }
      
      const isValid = await authService.validateToken();
      if (isValid) {
        if (statusEl) {
          statusEl.textContent = 'Token saved and validated!';
          statusEl.className = 'token-status success';
        }
        tokenInput.value = '';
        tokenInput.placeholder = '••••••••••••••••';
        
        // Close modal and enable edit mode
        setTimeout(() => {
          if (tokenModal) tokenModal.style.display = 'none';
          const url = new URL(window.location.href);
          url.searchParams.set('edit', 'true');
          window.location.href = url.toString();
        }, 1000);
      } else {
        if (statusEl) {
          statusEl.textContent = 'Invalid token. Please check your token and permissions.';
          statusEl.className = 'token-status error';
        }
        authService.clearToken();
      }
    });

    testBtn?.addEventListener('click', async () => {
      if (!authService.hasToken()) {
        if (statusEl) {
          statusEl.textContent = 'No token saved to test';
          statusEl.className = 'token-status error';
        }
        return;
      }

      if (statusEl) {
        statusEl.textContent = 'Testing token...';
        statusEl.className = 'token-status';
      }
      
      const isValid = await authService.validateToken();
      if (statusEl) {
        statusEl.textContent = isValid ? 'Token is valid!' : 'Token is invalid or expired';
        statusEl.className = `token-status ${isValid ? 'success' : 'error'}`;
      }
    });

    clearBtn?.addEventListener('click', () => {
      authService.clearToken();
      tokenInput.value = '';
      tokenInput.placeholder = 'Enter GitHub token...';
      if (statusEl) {
        statusEl.textContent = 'Token cleared';
        statusEl.className = 'token-status';
      }
      
      // Refresh page to hide edit buttons
      setTimeout(() => window.location.reload(), 1000);
    });
  }
}

// Initialize when DOM is loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initFooter);
} else {
  initFooter();
}
</script>

<style>
  .site-footer {
    margin-top: 4rem;
    padding: 2rem 0;
    border-top: 1px solid var(--border);
    background: var(--background-subtle);
  }

  .footer-content {
    max-width: 65ch;
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 2rem;
  }

  .footer-section {
    flex: 1;
  }

  .footer-section:first-child {
    flex: 0 0 auto;
  }

  .edit-link {
    background: var(--accent);
    color: white;
    border: 1px solid var(--accent);
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    font-size: 0.9em;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .edit-link:hover {
    background: var(--accent-hover);
    border-color: var(--accent-hover);
  }

  /* Token Modal Styles */
  .token-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .token-modal-container {
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 80%;
    display: flex;
    flex-direction: column;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .token-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border);
    background: var(--background-subtle);
  }

  .token-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
    color: var(--text-primary);
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 1.5em;
    cursor: pointer;
    color: var(--text-secondary);
    padding: 0;
    width: 1.5em;
    height: 1.5em;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background-color 0.15s ease;
  }

  .close-btn:hover {
    background: var(--border-light);
    color: var(--text-primary);
  }

  .token-modal-content {
    padding: 1.5rem;
    overflow-y: auto;
  }

  .token-modal-content p {
    font-size: 0.9em;
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }

  .token-form {
    margin-bottom: 1rem;
  }

  .token-input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border);
    border-radius: 4px;
    font-size: 0.9em;
    margin-bottom: 0.5rem;
    font-family: monospace;
    box-sizing: border-box;
  }

  .token-input:focus {
    outline: none;
    border-color: var(--accent);
  }

  .token-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn {
    padding: 0.4rem 0.8rem;
    border: 1px solid var(--border);
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8em;
    transition: all 0.15s ease;
  }

  .btn-primary {
    background: var(--accent);
    color: white;
    border-color: var(--accent);
  }

  .btn-primary:hover {
    background: var(--accent-hover);
    border-color: var(--accent-hover);
  }

  .btn-secondary {
    background: var(--background);
    color: var(--text-primary);
  }

  .btn-secondary:hover {
    background: var(--background-subtle);
  }

  .btn-danger {
    background: #dc3545;
    color: white;
    border-color: #dc3545;
  }

  .btn-danger:hover {
    background: #c82333;
    border-color: #c82333;
  }

  .token-status {
    font-size: 0.8em;
    margin: 0.5rem 0;
    color: var(--text-secondary);
  }

  .token-status.success {
    color: #28a745;
  }

  .token-status.error {
    color: #dc3545;
  }

  .token-help {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-light);
  }

  .token-help a {
    color: var(--accent);
    text-decoration: none;
  }

  .token-help a:hover {
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .footer-content {
      flex-direction: column;
      text-align: center;
    }

    .token-modal-container {
      width: 95%;
      margin: 1rem;
    }

    .token-actions {
      flex-direction: column;
    }
  }
</style>
