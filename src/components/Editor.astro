---
export interface Props {
  content: string;
  filePath: string;
  onSave?: (content: string) => void;
}
---

<div id="editor-modal" class="editor-modal">
  <div class="editor-container">
    <div class="editor-header">
      <h3>Edit Content</h3>
      <div class="editor-actions">
        <button id="save-btn" class="btn btn-primary">Save</button>
        <button id="cancel-btn" class="btn btn-secondary">Cancel</button>
      </div>
    </div>
    <div id="editor-content" class="editor-content"></div>
    <div class="editor-status" id="editor-status"></div>
  </div>
</div>

<script>
import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { keymap } from 'prosemirror-keymap';
import { history, undo, redo } from 'prosemirror-history';
import { baseKeymap } from 'prosemirror-commands';
import { defaultMarkdownParser, defaultMarkdownSerializer } from 'prosemirror-markdown';
import { githubService } from '../services/github';

class EditorManager {
  private view: EditorView | null = null;
  private originalContent: string = '';
  private filePath: string = '';
  private sha: string = '';

  init(content: string, filePath: string) {
    this.originalContent = content;
    this.filePath = filePath;
    this.setupEditor();
    this.setupEventListeners();
  }

  private setupEditor() {
    const container = document.getElementById('editor-content');
    if (!container) return;

    // Parse markdown to ProseMirror doc
    const doc = defaultMarkdownParser.parse(this.originalContent);
    
    const state = EditorState.create({
      doc,
      plugins: [
        history(),
        keymap({
          "Mod-z": undo,
          "Mod-y": redo,
          "Mod-Shift-z": redo
        }),
        keymap(baseKeymap)
      ]
    });

    this.view = new EditorView(container, {
      state,
      dispatchTransaction: (transaction) => {
        const newState = this.view!.state.apply(transaction);
        this.view!.updateState(newState);
      }
    });
  }

  private setupEventListeners() {
    const modal = document.getElementById('editor-modal');
    const saveBtn = document.getElementById('save-btn');
    const cancelBtn = document.getElementById('cancel-btn');

    saveBtn?.addEventListener('click', () => this.save());
    cancelBtn?.addEventListener('click', () => this.close());
    
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) this.close();
    });
  }

  private async save() {
    if (!this.view) return;

    const statusEl = document.getElementById('editor-status');
    if (statusEl) statusEl.textContent = 'Saving...';

    try {
      // Convert ProseMirror doc back to markdown
      const markdown = defaultMarkdownSerializer.serialize(this.view.state.doc);
      
      // Update file via GitHub API
      await githubService.updateFile(
        this.filePath,
        markdown,
        this.sha,
        `Update ${this.filePath} via inline editor`
      );

      if (statusEl) statusEl.textContent = 'Saved successfully!';
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Save failed:', error);
      const message = error instanceof Error ? error.message : 'Unknown error';
      if (statusEl) statusEl.textContent = `Error: ${message}`;
    }
  }

  private close() {
    const modal = document.getElementById('editor-modal');
    if (modal) modal.style.display = 'none';
    
    if (this.view) {
      this.view.destroy();
      this.view = null;
    }
  }

  async open(filePath: string) {
    try {
      const statusEl = document.getElementById('editor-status');
      if (statusEl) statusEl.textContent = 'Loading...';

      // Load file content from GitHub
      const fileData = await githubService.getFile(filePath);
      this.originalContent = fileData.content;
      this.filePath = filePath;
      this.sha = fileData.sha;

      this.setupEditor();
      
      const modal = document.getElementById('editor-modal');
      if (modal) modal.style.display = 'flex';
      
      if (statusEl) statusEl.textContent = '';
    } catch (error) {
      console.error('Failed to load content:', error);
      const message = error instanceof Error ? error.message : 'Unknown error';
      const statusEl = document.getElementById('editor-status');
      if (statusEl) statusEl.textContent = `Error: ${message}`;
    }
  }
}

// Global editor manager
(window as any).editorManager = new EditorManager();
</script>

<style>
  .editor-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .editor-container {
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 8px;
    width: 90%;
    max-width: 1000px;
    max-height: 80%;
    display: flex;
    flex-direction: column;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border);
    background: var(--background-subtle);
  }

  .editor-header h3 {
    margin: 0;
    font-size: 1.2em;
    color: var(--text-primary);
  }

  .editor-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border);
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9em;
    transition: all 0.15s ease;
  }

  .btn-primary {
    background: var(--accent);
    color: white;
    border-color: var(--accent);
  }

  .btn-primary:hover {
    background: var(--accent-hover);
    border-color: var(--accent-hover);
  }

  .btn-secondary {
    background: var(--background);
    color: var(--text-primary);
  }

  .btn-secondary:hover {
    background: var(--background-subtle);
  }

  .editor-content {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    min-height: 400px;
  }

  .editor-content :global(.ProseMirror) {
    outline: none;
    padding: 1rem;
    border: 1px solid var(--border);
    border-radius: 4px;
    min-height: 300px;
    font-family: Georgia, serif;
    line-height: 1.6;
  }

  .editor-content :global(.ProseMirror p) {
    margin: 1em 0;
  }

  .editor-content :global(.ProseMirror h1),
  .editor-content :global(.ProseMirror h2),
  .editor-content :global(.ProseMirror h3) {
    font-weight: 400;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
  }

  .editor-status {
    padding: 1rem 1.5rem;
    border-top: 1px solid var(--border);
    background: var(--background-subtle);
    color: var(--text-secondary);
    font-size: 0.9em;
    min-height: 1.2em;
  }

  @media (max-width: 768px) {
    .editor-container {
      width: 95%;
      max-height: 90%;
    }
    
    .editor-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }
  }
</style>